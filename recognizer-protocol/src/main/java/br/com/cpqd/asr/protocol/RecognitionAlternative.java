/*******************************************************************************
 * Copyright 2018 CPqD.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations under
 * the License.
 ******************************************************************************/
package br.com.cpqd.asr.protocol;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;
import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;

/**
 * Represents a result alternative generated by the speech recognition process.
 * 
 */
public class RecognitionAlternative {
	
	/** JSON Mapper. */
	private static final ObjectMapper mapper = new ObjectMapper()
			.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, true);

	/** Recognized sentence. */
	private String text;

	/** The confidence score. */
	@JsonProperty("score")
	private int confidence;

	/** The Language Model. */
	@JsonProperty("lm")
	private String lm;

	/** The interpretation result list. */
	@JacksonXmlElementWrapper(localName = "interpretations")
    @JacksonXmlProperty(localName = "interpretation")
    @JsonInclude(Include.NON_EMPTY)
    private List<Object> interpretations = new ArrayList<>();

	/** The confidence score of each interpretation. */
	@JacksonXmlElementWrapper(localName = "interpretation_scores")
    @JacksonXmlProperty(localName = "interpretation_score")
    @JsonInclude(Include.NON_EMPTY)
	@JsonProperty("interpretation_scores")
    private List<Integer> interpretationScoreList = new ArrayList<>();

	/** Recognized word list. */
	@JacksonXmlElementWrapper(localName = "words")
	@JacksonXmlProperty(localName = "word")
	@JsonInclude(Include.NON_EMPTY)
	private List<RecogWord> words = new ArrayList<>();
	
	public String getText() {
		return text;
	}

	public void setText(String text) {
		this.text = text;
	}

	public int getConfidence() {
		return confidence;
	}

	public void setConfidence(int confidence) {
		this.confidence = confidence;
	}

	public String getLm() {
		return lm;
	}

	public void setLm(String lm) {
		this.lm = lm;
	}

	public List<RecogWord> getWords() {
		return words;
	}

	public List<Object> getInterpretations() {
		return interpretations;
	}

	public void addInterpretation(String json, int confidence) throws JsonParseException, JsonMappingException, IOException {
		this.interpretations.add(mapper.readValue(json, Object.class));
		this.interpretationScoreList.add(confidence);
	}

	public List<Integer> getInterpretationScoreList() {
		return interpretationScoreList;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + confidence;
		result = prime * result + ((lm == null) ? 0 : lm.hashCode());
		result = prime * result + ((text == null) ? 0 : text.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		RecognitionAlternative other = (RecognitionAlternative) obj;
		if (confidence != other.confidence)
			return false;
		if (lm == null) {
			if (other.lm != null)
				return false;
		} else if (!lm.equals(other.lm))
			return false;
		if (text == null) {
			if (other.text != null)
				return false;
		} else if (!text.equals(other.text))
			return false;
		return true;
	}

	@Override
	public String toString() {
		return "RecognitionAlternative [text=" + text + ", confidence=" + confidence + ", lm=" + lm + ", words=" + words
				+ ", interpretations=" + (interpretations.size() == 0 ? interpretations : interpretations) + "]";
	}

}
